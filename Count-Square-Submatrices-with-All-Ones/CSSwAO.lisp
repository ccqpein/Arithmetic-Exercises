(defun count-squares (m)
  (let* ((row (length m))
         (col (length (car m)))
         (whole-size (min row col))
         (count 0)
        )
    (loop
       for r from 0 to (1- row)
       do (loop
             for c from 0 to (1- col)
             do (do ((si 1 (1+ si))
                     )
                    ((> si whole-size))
                  (if (or (> (+ r si) row)
                          (> (+ c si) col))
                      (return))
                  (if (pick-matrix m r c si)
                      (setf count (1+ count))))))
    count))

(defun pick-matrix (m row col size)
  (loop
     for r from row to (+ row size -1)
     for temp = (subseq (nth r m) col (+ col size))
     do (dolist (x temp) (if (/= 1 x) (return-from pick-matrix nil)))
     finally (return t)))

(defun main ()
  (let ((m0 '((0 1 1 1)
              (1 1 1 1)
              (0 1 1 1)))
        (m1 '((1 0 1)
              (1 1 0)
              (1 1 0))))
    ;;(pick-matrix m0 0 1 1)
    (count-squares m1)
    )
  )
