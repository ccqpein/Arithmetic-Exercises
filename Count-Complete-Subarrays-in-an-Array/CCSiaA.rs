pub fn count_complete_subarrays(nums: Vec<i32>) -> i32 {
    use std::collections::HashSet;
    let s = nums.iter().cloned().collect::<HashSet<i32>>();
    let mut result = 0;

    'a: for i in 0..nums.len() {
        for how_many in s.len()..=nums.len() - i {
            //dbg!(i);
            //dbg!(how_many);
            let ss = nums[i..i + how_many]
                .iter()
                .cloned()
                .collect::<HashSet<i32>>();

            if ss.symmetric_difference(&s).count() == 0 {
                dbg!(i);
                dbg!(how_many);
                //dbg!(nums.len() - i - how_many + 1);
                result += nums.len() - i - how_many + 1;
                continue 'a;
            }
        }
    }
    result as i32
}

fn main() {
    println!("{}", count_complete_subarrays(vec![1, 3, 1, 2, 2]));
    println!("{}", count_complete_subarrays(vec![5, 5, 5, 5]));
    println!(
        "{}",
        count_complete_subarrays(vec![
            1762, 1998, 1762, 1762, 1762, 1348, 807, 1248, 1762, 1697, 189, 1998, 597, 1561, 1715,
            966, 1057, 1348, 1762, 181, 805, 649, 651, 732, 354, 825, 1, 1470, 1766, 232, 643, 966,
            1395, 1762, 1, 1087, 1150, 1741, 1117, 643, 238, 765, 827, 996, 1354, 739, 1573, 1622,
            232, 1931, 1650, 1395, 34, 550, 1087, 1470, 1598, 1647, 1915, 189, 1026, 980, 831,
            1859, 1145, 1414, 821, 1207, 1499, 1672, 1218, 765, 60, 550, 362, 458, 1762, 845, 1260,
            1667, 1867, 1614, 1482, 913, 1583, 1762, 1018, 782, 1348, 1314, 338, 14, 641, 1270,
            1184, 181, 444, 1046, 1695, 643, 238, 1108, 1715, 1682, 752, 444, 47, 596, 1019, 126,
            541, 1417, 1334, 550, 1626, 467, 1667, 828, 815, 841, 1889, 358, 550, 572, 1474, 482,
            494, 597, 250, 1439, 973, 1646, 1762, 232, 1741, 966, 181, 1280, 157, 512, 831, 685,
            409, 1614, 1622, 320, 1240, 827, 980, 104, 1667, 1246, 956, 482, 1288, 1832, 238, 603,
            820, 1579, 846, 1661, 609, 980, 1727, 405, 461, 223, 767, 1741, 739, 1098, 668, 447,
            933, 1724, 320, 1186, 1880, 1211, 1695, 282, 1353, 796, 469, 967, 232, 444, 561, 977,
            1793, 1302, 294, 1816, 182, 1334, 1176, 1260, 980, 1482, 1438, 643, 1297, 73, 1042,
            1859, 643, 1225, 181, 1943, 927, 1482, 1658, 744, 1482, 1019, 377, 1487, 1859, 1482,
            45, 867, 732, 872, 309, 412, 1584, 1530, 1766, 728, 470, 1353, 179, 940, 1248, 171,
            1335, 408, 1495, 624, 1602, 1682, 1762, 1302, 366, 1057, 746, 1667, 564, 134, 1128,
            1425, 739, 261, 19, 214, 1511, 1573, 562, 1134, 1271, 651, 893, 1667, 1662, 941, 1482,
            1150, 1998, 1832, 238, 656, 1179, 914, 1867, 1955, 755, 1276, 324, 1637
        ])
    );
}
