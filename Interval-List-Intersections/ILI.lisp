(defun interval-intersection (a b)
  (do* ((result '())
        (aI a)
        (bI b)
        (aa (car aI))
        (bb (car bI)))
       ((or (= 0 (length aI)) (= 0 (length aI))) (reverse result))
    (if (<= (car aa) (car bb))
        (if (< (cadr aa) (car bb))
            (setf aI (cdr aI)
                  aa (car aI))
            (if (>= (cadr aa) (car bb))
                (if (< (cadr aa) (cadr bb))
                    (progn (push (list (car bb) (cadr aa)) result)
                           (setf aI (cdr aI)
                                 aa (car aI)))
                    (progn (push bb result)
                           (setf bI (cdr bI)
                                 bb (car bI)))))
            )
        (cond ((> (car aa) (cadr bb))
               (setf bI (cdr bI)
                     bb (car bI)))
              ((>= (cadr aa) (cadr bb))
               (progn (push (list (car aa) (cadr bb)) result)
                      (setf bI (cdr bI)
                            bb (car bI))))
              ((< (cadr aa) (cadr bb))
               (progn (push (list (car aa) (cadr aa)) result)
                      (setf aI (cdr aI)
                            aa (car aI))))
              ))))
