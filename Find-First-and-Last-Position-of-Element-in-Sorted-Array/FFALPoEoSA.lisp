(defun find-first (nums start end target)
  (let ((mid-end (floor (/ (+ start end) 2)))
        )
    (if (= mid-end start)
        (cond ((= target (nth start nums))
               (return-from find-first start))
              ((= target (nth end nums))
               (return-from find-first end))
              (t (return-from find-first -1))))
    (cond ((< (nth mid-end nums) target)
           (find-first nums mid-end end target))
          ((= (nth mid-end nums) target)
           (find-first nums start mid-end target))
          (t (find-first nums start mid-end target)))
    ))
