(defvar *test '(2 1 3))

(defun insert-sort-list (l)
  (do* ((restL l (cdr restL))
        (reL '())
        (thisN (car restL) (car restL)))
       ((eql 'nil restL) reL)
    (setf reL (insert-list reL thisN))
    ))


(defun insert-list (l a)
  (cond ((eql 'nil l) (return-from insert-list (list a)))
        ((>= a (car (last l))) (return-from insert-list (append l (list a))))
        ((<= a (first l)) (return-from insert-list (cons a l))))
  (do* ((reL '())
        (secondl l (cdr secondl))
        (thisn (car secondl) (car secondl)))
       ((eql 'nil secondl) (reverse reL))
    (if (< a thisn)
        (progn (push a reL) (push thisn reL)
               (return-from insert-list (append (reverse reL) (cdr secondl))))
        (push thisn reL))))
