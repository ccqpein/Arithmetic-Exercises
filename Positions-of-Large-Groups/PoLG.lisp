(defun lgp (s)
  (let ((s (concatenate 'list s)))
    (do* ((result '())
          (rest (cdr s) (cdr rest))
          (last-char (car s) b)
          (b (car rest) (car rest))
          (this-ind 1 (1+ this-ind))
          (start 0)
          )
         ((not rest) (if (> (- this-ind start) 2) (append result (list (list start (1- this-ind)))) result))
      ;;(format t "~a~a~%" b last-char)
      ;;(format t "~a~a~%" start this-ind)
      (cond ((and (char/= b last-char)
                  (> (- this-ind start) 2))
             (setf result (append result (list (list start (1- this-ind))))
                   start this-ind))
            ((char/= b last-char)
             (setf start this-ind)))
      ))
  )

(defun main ()
  (format t "~a" (lgp "abbxxxxzzy"))
  (format t "~a" (lgp "abcdddeeeeaabbbcd"))
  (format t "~a" (lgp "aaa"))
  (format t "~a" (lgp "bababbabaa"))
  )
