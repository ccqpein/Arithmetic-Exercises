(defun add-to-array-form (nums k)
  (let ((kl (loop for c across (write-to-string k)
                  collect (digit-char-p c))))
    (labels ((add-each (l1 l2 a)
               (if (= a 0) 
                   (cond ((not l1) (return-from add-each l2))
                         ((not l2) (return-from add-each l1))
                         )
                   (if (and (not l1) (not l2))
                       (return-from add-each (list a))))
               
               (let* ((l11 (if (not (car l1)) 0 (car l1)))
                      (l22 (if (not (car l2)) 0 (car l2)))
                      (first (apply #'+ l11 l22 (list a))))
                 (if (>= first 10)
                     (cons (mod first 10) (add-each (cdr l1) (cdr l2) 1))
                     (cons first (add-each (cdr l1) (cdr l2) 0))))))
      
      (reverse (add-each (reverse nums) (reverse kl) 0))
      )))

(defun main ()
  (assert (equal (add-to-array-form '(1 2 0 0) 34) '(1 2 3 4)))
  (assert (equal (add-to-array-form '(2 1 5) 806) '(1 0 2 1)))
  (assert (equal (add-to-array-form '(2 7 4) 181) '(4 5 5)))
  (assert (equal (add-to-array-form '(9 9 9 9 9 9 9 9 9 9) 1) '(1 0 0 0 0 0 0 0 0 0 0)))
  (assert (equal (add-to-array-form '(0) 23) '(2 3)))
  (assert (equal (add-to-array-form '(6) 809) '(8 1 5))))
