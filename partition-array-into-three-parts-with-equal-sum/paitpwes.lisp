(defun can-three-parts-equal-sum (ll)
  (do ((ll (cdr ll) (cdr ll))
       (cache (car ll)))
      ((not ll) nil)
    (if (and cache (helper cache ll))
        (return-from can-three-parts-equal-sum t))
    ;;(format t "~a~%" ll)
    (incf cache (car ll))
    ))

(defun helper (target ll)
  (if (zerop (length ll)) (return-from helper nil))
  (do ((ll (cdr ll) (cdr ll))
       (cache (car ll)))
      ((not ll) nil)
    ;;(format t "in helper ~a ~a~%" cache ll)
    (if (= target cache (apply #'+ ll)) (return-from helper t))
    (incf cache (car ll))))

(defun main ()
  (assert (can-three-parts-equal-sum '(0 2 1 -6 6 -7 9 1 2 0 1)))
  (assert (not (can-three-parts-equal-sum '(0 2 1 -6 6 7 9 -1 2 0 1))))
  (assert (can-three-parts-equal-sum '(3 3 6 5 -2 2 5 1 -9 4)))
  (assert (not (can-three-parts-equal-sum '(1 -1 1 -1)))))
