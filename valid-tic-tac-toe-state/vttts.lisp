(defun valid-tic-tac-toe (board)
  (let* ((board (loop for s in board append (concatenate 'list s)))
         (x-count (loop for c in board if (char= #\X c) count 1))
         (o-count (loop for c in board if (char= #\O c) count 1)))
    (cond ((and (/= x-count o-count) (/= 1 (- x-count o-count)))
           nil)
          ((= 1 (- x-count o-count))
           (loop for (a b c) in '((0 3 6) (1 4 7) (2 5 8) (0 1 2) (3 4 5) (6 7 8) (0 4 8) (2 4 6))
                 when (and (char= #\O (nth a board))
                           (char= #\O (nth b board))
                           (char= #\O (nth c board)))
                   do (return-from valid-tic-tac-toe nil)))
          ((= x-count o-count)
           (loop for (a b c) in '((0 3 6) (1 4 7) (2 5 8) (0 1 2) (3 4 5) (6 7 8) (0 4 8) (2 4 6))
                 when (and (char= #\X (nth a board))
                           (char= #\X (nth b board))
                           (char= #\X (nth c board)))
                   do (return-from valid-tic-tac-toe nil)))
          (t t))))

(defun main ()
  (assert (not (valid-tic-tac-toe '("O  " "   " "   "))))
  (assert (not (valid-tic-tac-toe '("XOX" " X " "   "))))
  (assert (not (valid-tic-tac-toe '("XOX" "O O" "XOX"))))
  (assert (not (valid-tic-tac-toe '("XXX" "   " "OOO"))))
  (assert (not (valid-tic-tac-toe '("XXX" "XOO" "OO "))))
  )
