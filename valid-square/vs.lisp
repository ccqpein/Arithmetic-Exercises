(defun distance (a b)
  (expt (+ (expt (- (nth 0 a) (nth 0 b)) 2)
           (expt (- (nth 1 a) (nth 1 b)) 2))
        1/2))

(defun valid-square (a b c d)
  (let ((dists (list (distance a b)
                     (distance a c)
                     (distance a d)
                     (distance b c)
                     (distance b d)
                     (distance c d))))
    (setf dists (sort dists #'<))
    (and (/= (nth 0 dists) 0)
         (= (nth 0 dists) (nth 1 dists))
         (= (nth 1 dists) (nth 2 dists))
         (= (nth 2 dists) (nth 3 dists))
         (= (nth 4 dists) (nth 5 dists)))
    ))

(defun main ()
  (assert (valid-square '(0 0) '(1 1) '(1 0) '(0 1)))
  (assert (valid-square '(1 0) '(-1 0) '(0 1) '(0 -1)))
  (assert (not (valid-square '(0 0) '(0 0) '(0 0) '(0 0)))))
