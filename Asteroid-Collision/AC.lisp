(defun asteroid-collision (l)
  (let ((stack '()))
    (do* ((rest l)
          )
         ((eq rest nil) (reverse stack))
      (case stack
        ('()
          (setf stack (cons (car rest) stack)
                rest (cdr rest)))
        (otherwise
         (if (and (< (car rest) 0) (> (car stack) 0))
             (cond
               ((= (car stack) (abs (car rest)))
                (setf stack (cdr stack)
                      rest (cdr rest)))
               ((> (car stack) (abs (car rest)))
                (setf rest (cdr rest)))
               ((< (car stack) (abs (car rest)))
                (setf stack (cdr stack)))
               (t (setf stack (cons (car rest) stack)
                        rest (cdr rest))))
             (setf stack (cons (car rest) stack)
                   rest (cdr rest))
             ))))))

(asteroid-collision '(5 10 -5))
(asteroid-collision '(8 -8))
(asteroid-collision '(10 2 -5))
(asteroid-collision '(1 -2 -2 -2))
