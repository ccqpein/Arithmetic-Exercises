(defun make-fancy-string (s)
  (let ((chars (concatenate 'list s)))
    (do* ((result '())
          (last (first chars) (first cc))
          (cc (cdr chars) (cdr cc))
          (count 1)
          (cache (list last)))
         ((not cc) (concatenate 'string (append result cache)))
      (if (char/= last (first cc))
          (setf result (append result cache)
                last (first cc)
                count 1
                cache (list last))
          (if (< count 2)
              (setf count (1+ count)
                    cache (append cache (list last))))))))

(assert (string= "leetcode" (make-fancy-string "leeetcode")))
(assert (string= "aabaa" (make-fancy-string "aaabaaaa")))
(assert (string= "aab" (make-fancy-string "aab")))
